#include "toolbox.h"
#include <numeric>

// Coefficients corresponding with 0x91 as output mask
const int8_t COEFFS_I_0x91[256] = {0, 0, -10, 6, 2, -2, -4, -8, 14, -2, 0, 8, 4, 0, 2, 6, -12, -8, -10, -14, -2, -10, -4, 12, -6, 6, 8, 4, 8, 8, 10, -6, 12, 4, 10, 2, -6, -10, -12, 0, -2, 6, -8, 8, -8, 4, -10, -6, -8, 12, 2, -2, -2, -2, 12, -12, 10, 6, 0, -4, 12, 4, -2, -10, 2, 2, 4, 12, -16, -4, -2, 2, 0, -8, -2, -10, 2, 6, -12, 8, 6, -6, -4, 0, -12, -4, -2, -10, -12, 8, -10, 2, 6, -2, -12, 4, 2, 10, 4, 4, 12, -8, 2, -10, 12, -4, -6, -6, 2, 6, 12, -16, 14, 2, -12, 8, -8, 8, 10, -6, 0, 4, 2, 14, 6, 6, 12, -12, 4, -8, 14, 2, 6, 6, -12, -12, -6, -10, 0, 4, 0, 8, -14, 2, -12, 12, 2, -14, -10, 2, 0, -12, 2, -6, -4, 4, -8, -12, 6, 2, -4, 0, -2, 2, 2, 10, -16, -8, 6, 2, -12, -8, -8, 8, -6, -14, -4, -4, 2, -6, 2, -2, -4, 0, 6, -10, 8, 8, 8, -12, -10, 2, -10, -6, -12, 0, -12, -12, -2, 6, -4, -16, -10, 10, 14, 14, -4, -4, 6, 14, 0, 8, 12, 8, -6, 6, -4, -4, 2, 10, 6, -6, -8, 4, -14, 6, -16, 12, 4, -4, 6, 6, 4, 8, -2, 2, -14, -6, -8, 0, -14, 2, -4, 12, -4, -8, 2, 14, 12, -12, 2, -14, 2, 6, 12, 8};
const uint16_t I_0x91_offset = (1 - (std::accumulate(COEFFS_I_0x91, COEFFS_I_0x91 + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0xB3 as output mask
const int8_t COEFFS_I_0xB3[256] = {0, 0, 6, -2, 4, 0, 2, 6, 2, 14, -16, -4, 14, -2, -4, -4, 12, -16, 2, 6, -4, 4, 10, 2, -6, -14, -8, 8, 2, -10, 0, -4, 14, 2, 8, -12, -14, 2, -12, 12, 12, -12, -10, -2, 8, -12, 2, -2, -10, -2, 0, 8, 6, 2, 8, -12, 0, -12, -6, 6, 8, 8, 2, 10, -2, -2, 12, -4, 2, -10, 0, 4, 0, -4, 14, 2, 12, 4, -14, 2, -10, 2, -12, -8, 14, 6, -4, 12, -4, -4, 10, -6, -4, 0, 2, -10, 8, -12, -6, -10, -12, -12, 6, -10, 14, 14, 8, 0, 2, -2, 4, -8, 4, 12, 6, 6, -12, -8, 6, 2, -2, 2, -8, 12, 6, -2, -8, 0, -4, -4, 10, -6, 0, -4, 6, 2, 2, -2, -8, -4, -10, 6, 12, -12, 4, -8, -6, 6, -12, -4, -14, 2, 6, -2, 4, -4, 6, -6, -12, -8, -10, 10, 0, 4, 2, 2, -12, -12, -8, 0, -14, 2, -12, 0, -2, 2, 2, 10, 4, 4, -6, -10, 4, 8, 0, -12, -14, 6, -8, 8, -6, -6, 6, 6, 4, 12, 2, 6, -16, -4, -4, -8, -6, -10, 8, 0, -2, -10, 2, -2, -8, 4, 2, 10, -8, -16, 12, -4, -14, -6, 12, -16, -6, -10, 12, 8, 6, 10, 8, -8, 2, -6, 6, 6, 8, 8, 2, 14, 12, -8, -12, 12, -10, -2, 4, 8, 6, -6, -14, -10, 12, 8, 2, -6, 4, -12};
const uint16_t I_0xB3_offset = (1 - (std::accumulate(COEFFS_I_0xB3, COEFFS_I_0xB3 + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0x22 as output mask
const int8_t COEFFS_I_0x22[256] = {0, -4, 8, -12, -6, -2, -10, 10, 12, 12, 8, 8, 10, 10, -6, -6, 0, -12, -4, 16, -2, 10, 6, 2, 8, 0, -8, 0, -6, 2, 6, 14, -2, -2, -6, -6, 4, -12, 12, -4, -14, -2, 10, 6, -12, -8, -8, 12, 10, 10, 10, -6, 4, 4, 8, 8, -14, 14, 14, 10, 8, 12, -8, 12, 16, 4, -12, 8, -10, -6, -2, -14, -4, 12, 12, -4, -10, -2, 10, 2, 4, 8, 4, -8, -2, 2, 10, -2, -4, -4, -8, 8, 10, -14, 2, -6, 14, -2, -2, -2, 8, 0, 4, -4, 2, -10, -10, -6, -8, 12, -8, 12, 6, 14, -14, -6, 4, 4, 4, 4, -2, -6, -2, -6, 8, -12, 12, -8, 12, 12, -8, 0, -2, 6, -2, -2, -12, 0, 4, -8, 2, 14, 6, 10, 12, -12, -4, 12, -6, -6, 6, 14, 16, 4, 4, 0, -6, -2, -6, 6, 2, -2, -6, -2, 0, 12, -12, -8, -14, 2, 6, -2, 4, 12, -12, -12, -2, -6, -6, -2, -8, -12, -8, -4, 2, 2, -6, 2, 0, 8, 12, -4, 0, 8, -8, 8, -10, -2, -14, 2, 8, 4, -4, 16, -6, -2, -14, 14, -4, -12, 0, 0, -2, 6, -2, -2, 16, -4, 0, 4, -2, 2, -6, 6, 6, 2, 2, 6, 0, -12, -8, -12, 6, -2, 6, -10, 4, 12, 0, 0, 6, 10, -2, 10, 12, -8, -8, -4, 10, -6, -10, -2, -12, 4, 4, -4};
const uint16_t I_0x22_offset = (1 - (std::accumulate(COEFFS_I_0x22, COEFFS_I_0x22 + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0x2E as input mask
const int8_t COEFFS_O_0x2E[256] = {0, -2, -6, -8, -2, -12, 8, 6, 0, 6, -14, 8, -2, -12, -8, 6, -12, -2, 10, 4, 6, 8, -12, -2, 4, -2, -6, 4, -2, -8, 4, 6, 10, -12, -8, -14, 0, 10, -2, 0, 6, -8, -12, -10, 4, -2, 10, -4, 10, 0, 12, -14, 4, -6, -2, -4, -10, -4, 0, 6, 0, -2, 10, 0, 12, 10, -2, -4, 2, 8, 12, -6, -16, 6, -6, -16, -2, -12, -8, -10, -12, 6, -6, -4, 6, 0, 12, 14, -8, -6, -2, 0, -6, 12, -8, 2, -10, 8, 12, 14, -4, -2, 10, 4, -2, 8, -12, -2, 4, 6, -6, 4, 2, -8, -12, -6, -12, -6, 6, -12, -6, 0, -12, 10, 4, -14, 6, -4, 0, -2, 10, 8, -14, 0, 4, -6, -8, -10, 2, 16, -14, 8, 12, -6, 12, -10, 2, 12, 10, -12, 0, 2, -12, 6, -14, 4, 2, 12, 8, 10, 2, 12, -8, 2, -4, -2, -6, 4, -2, -8, 12, 6, -8, 2, 6, -8, 2, 8, 12, 2, -8, 6, 2, -8, -2, -4, 8, 6, -4, 10, -2, 4, -16, -2, -14, -16, -6, -8, 12, 2, 12, -6, -2, -4, -10, -4, 0, -2, -8, 10, -2, 0, 6, -8, -12, 14, -12, -2, -14, -4, -6, -4, 8, 2, 10, 12, 8, -6, -12, 14, 2, -12, 2, -12, 8, -6, 4, 6, -14, -4, -2, 4, -8, -2, -4, 10, -2, 4, -10, 4, 0, 14, 4, 2, 14, 4};
const uint16_t O_0x2E_offset = (1 - (std::accumulate(COEFFS_O_0x2E, COEFFS_O_0x2E + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0xFA as input mask
const int8_t COEFFS_O_0xFA[256] = {0, 14, 2, 12, -10, -8, 0, -2, 6, 12, 0, -14, -4, -2, 6, 4, 2, -4, 0, -2, -4, -14, 2, -4, 4, 14, 2, 16, 14, 12, 12, -2, -12, 2, -10, 8, 2, -12, 12, 2, -6, -8, 12, 14, 8, -14, -6, -8, -6, -4, -8, -10, -12, 2, 10, -12, -12, -2, 10, 0, -2, 12, -12, -2, 6, 8, -12, 2, 4, -6, 2, 4, -16, 2, 6, -12, -10, 4, 4, -2, -4, 2, 6, -16, 6, 8, 0, 6, -6, 8, 4, -10, -4, -2, 14, 4, 6, 8, -12, 10, -12, -6, 2, -4, 8, 2, 6, -12, 14, -12, 4, 14, -8, 6, -14, -4, 10, 4, -12, 10, 6, 4, 8, -14, 0, 2, -6, -8, 6, -4, 0, -14, 4, 6, -10, 4, 4, 2, -10, 16, -6, -4, -4, -6, -8, 2, -10, 4, 2, 0, -8, 10, 2, 12, 0, -2, 4, 10, 2, -4, 2, 8, -12, -2, -8, 10, 2, 8, 8, -2, -6, 4, 6, 0, -8, 6, -8, -6, 14, 12, 2, -8, 0, 2, 2, 12, 0, 6, -12, -6, -14, -12, -12, 6, -6, 8, 2, 0, 8, -14, 6, 8, 4, 2, 4, 10, -6, -4, -6, 8, -12, -10, -4, -2, -10, -4, -16, 6, -6, -12, 2, -12, -12, 10, 12, -2, 10, 0, -6, -8, 8, -6, -2, -8, 12, -6, -4, -6, 2, -12, -2, -12, 0, 2, -8, 2, -6, 0, 12, 2, -10, -8, -10, 8, -8, -10};
const uint16_t O_0xFA_offset = (1 - (std::accumulate(COEFFS_O_0xFA, COEFFS_O_0xFA + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0xB6 as input mask
const int8_t COEFFS_O_0xB6[256] = {0, 4, 6, -2, -12, 0, -10, 6, 0, 12, 10, 2, 16, -4, -2, 6, -8, -8, 6, -6, 0, 0, 2, 6, 12, 4, 6, 10, -8, -8, -2, -6, -14, -14, -8, 4, 14, -2, -8, -12, -6, -6, -12, 8, 2, 10, -8, -12, 6, -6, 4, -12, -2, -6, 8, 0, -6, -2, -12, -4, -10, 10, 4, -4, 6, 6, -12, 8, -6, 2, 12, 8, -6, 10, -4, 8, 10, 10, -8, -12, 10, -2, 8, 0, 10, -2, 4, -4, 2, 6, 12, -4, -10, -14, -12, -4, 8, -4, 14, -2, -4, -16, -2, -2, 4, -16, 14, 14, 4, -8, 2, -6, 8, -8, 14, -6, 0, 8, 10, -2, 0, 8, 2, -2, 12, 4, -6, -10, 12, -8, 10, -6, -12, 8, 6, -2, -8, 12, 2, 2, 12, 0, 2, 2, -4, -4, -6, 14, 0, 0, -6, 14, 4, -4, 6, -6, -4, -4, 2, -2, 2, 10, -8, -4, 2, -6, -12, -8, -2, 6, 0, -4, 10, -6, 16, 4, 14, 2, -12, 4, 2, -2, -4, 4, -2, 2, 8, 0, -10, 10, 12, 4, 2, -6, 0, -4, -6, 10, 4, 8, 2, -6, -4, -16, -10, 14, -12, -8, 6, 10, 12, -12, -14, 6, 12, -12, 2, 6, 12, 12, 2, 14, 8, 0, -8, -12, -10, -2, 0, 12, 2, -6, 8, 12, 2, -6, 12, 8, -14, 2, 8, -8, -2, 10, 12, 4, -2, -14, 12, 4, 6, 2, -12, 12, 2, -2};
const uint16_t O_0xB6_offset = (1 - (std::accumulate(COEFFS_O_0xB6, COEFFS_O_0xB6 + 256, 0) >> 7)) >> 1;

// Coefficients corresponding with 0x72 as input mask
const int8_t COEFFS_O_0x72[256] = {0, 4, 8, 12, -2, 6, -6, -6, 4, -4, 4, -4, -2, 2, 10, 6, 10, -14, 2, 10, -12, 0, 0, -12, -6, 6, 2, -2, 0, -8, 4, -12, 10, -2, -14, -2, -4, 4, 0, 8, -6, 10, -6, 2, -8, -12, 12, 8, 4, 4, 12, 4, 10, -2, -2, 2, -16, -4, -8, 12, 2, -6, -2, -10, -16, 4, -12, 8, -10, -2, 6, 6, -4, 4, 8, 0, -2, -14, -2, -6, 6, -2, 2, -6, -8, 4, 0, -12, -2, 10, -6, 6, 12, 4, 12, 12, -2, -6, -6, -2, 8, -8, -8, -8, -2, 6, 2, 2, -12, -8, -12, -8, -4, -12, 0, 0, 10, -10, -14, -2, -8, -4, 12, -8, -14, -14, 2, 2, 10, 10, 6, -10, -8, 12, -16, -4, -6, -10, 6, 2, 12, -12, -4, 12, 8, -12, -4, 8, 10, -6, -6, 2, 12, -12, -8, 0, 2, 6, 2, -2, -8, -8, -12, 12, -6, 14, -6, -2, 4, -8, 0, -4, 10, -6, -14, 2, -10, -6, -6, 6, 4, 12, -4, -12, 6, -2, 2, 2, 8, 12, 16, 4, 14, -2, 6, -10, -12, -8, 16, -4, 6, -14, 14, -6, 0, 8, 4, -12, -8, -12, 0, 12, -14, -14, -2, 6, 4, 12, 4, 12, 2, -10, 14, -6, 0, 8, 0, 0, 10, -10, -10, -14, -4, 8, -4, 0, -6, 2, -2, -10, 2, -2, 2, 6, 8, -8, 4, 4, 2, -14, -6, 2, 12, 8, 8, 4};
const uint16_t O_0x72_offset = (1 - (std::accumulate(COEFFS_O_0x72, COEFFS_O_0x72 + 256, 0) >> 7)) >> 1;

inline uint16_t compute_sbox_parity(uint8_t pt, uint8_t key, const int8_t *coeffs, const uint16_t offset)
{
    int16_t linearized = 0;
    for (uint16_t ipm = 0; ipm < 0x100; ipm++)
    {
        linearized += coeffs[ipm] * P8((pt ^ key) & ipm);
    }
    return (uint16_t)(offset + (linearized >> 7));
}

void blindtrail()
{
    // Settings
    const uint32_t sample_size = 0x40000;
    const uint16_t rounds = 3;
    uint32_t key[16] = {
        // 0x24892A1C,
        // 0x366A5CCB,
        // 0x0AFF3C67,
        // 0xB6FF80D9
        0x00000000,
        0x00000000,
        0x00000000,
        0x00000000,
        0x90C42AC6,
        0xD4F08764,
        0x9652855C,
        0x98870167,
        0xC5D0CA94,
        0x907A65C8,
        0xED375612,
        0x690817A2,
        0x00000000,
        0x00000000,
        0x00000000,
        0x00000000
    };
    // uint32_t expandedkey[4 * (rounds + 1)];
    // ExpandKey(key, expandedkey, (rounds + 1));
    uint32_t *expandedkey = key;

    for (uint16_t i = 0; i < rounds + 1; i++)
    {
        for (uint16_t j = 0; j < 4; j++)
        {
            std::cout << std::hex << "0x" << expandedkey[4 * i + j] << " ";
        }
        std::cout << std::dec << std::endl;
    }

    uint32_t pt[4];
    int32_t exp_count = sample_size / 2;
    int32_t act_count = sample_size / 2;
    uint32_t p0, p1, p2, p3, eip, eop, aip, aop;

    for (uint32_t i = 0; i < sample_size; i++)
    {
        // Choose random plaintext
        for (uint16_t j = 0; j < 4; j++)
        {
            pt[j] = rand_uint32();
        }

        // Expect-analyse input
        p0 = compute_sbox_parity(pt[0] >> 24 & 0xFF, 0x00, COEFFS_I_0x91, I_0x91_offset);
        p1 = compute_sbox_parity(pt[1] >> 16 & 0xFF, 0x00, COEFFS_I_0xB3, I_0xB3_offset);
        p2 = compute_sbox_parity(pt[2] >> 8 & 0xFF,  0x00, COEFFS_I_0x22, I_0x22_offset);
        p3 = compute_sbox_parity(pt[3] >> 0 & 0xFF,  0x00, COEFFS_I_0x22, I_0x22_offset);
        eip = p0 ^ p1 ^ p2 ^ p3;

        // Encrypt first round
        AddRoundKey(pt, expandedkey, 0);
        SubBytes(pt);
        ShiftRows(pt);
        MixColumns(pt);
        AddRoundKey(pt, expandedkey, 1);

        // Actual analysis input
        aip = P8(pt[0] >> 24 & 0x22);

        // Encrypt second round
        SubBytes(pt);
        ShiftRows(pt);
        MixColumns(pt);

        // Actual analysis output
        aop = P32(pt[0] & 0x2EFAB672);

        // Encrypt third round
        AddRoundKey(pt, expandedkey, 2);
        SubBytes(pt);
        ShiftRows(pt);
        AddRoundKey(pt, expandedkey, 3);

        // Expect-analyse output
        p0 = compute_sbox_parity(pt[0] >> 24 & 0xFF, 0x00, COEFFS_O_0x2E, O_0x2E_offset);
        p1 = compute_sbox_parity(pt[3] >> 16 & 0xFF, 0x00, COEFFS_O_0xFA, O_0xFA_offset);
        p2 = compute_sbox_parity(pt[2] >>  8 & 0xFF, 0x00, COEFFS_O_0xB6, O_0xB6_offset);
        p3 = compute_sbox_parity(pt[1] >>  0 & 0xFF, 0x00, COEFFS_O_0x72, O_0x72_offset);
        eop = p0 ^ p1 ^ p2 ^ p3;

        exp_count -= eip ^ eop;
        act_count -= aip ^ aop;
    }

    std::cout << "Expected: " << exp_count << std::endl;
    std::cout << "Actual: " << act_count << std::endl;
}

int main()
{
    blindtrail();
    return 0;
}