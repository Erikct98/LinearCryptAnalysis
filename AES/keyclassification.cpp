#include "toolbox.h"

uint8_t ipm_masks_5mm[1280] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x67, 0x8E, 0xA3, 0xC4,
    0x4D, 0x6A, 0x97, 0xB0, 0xFD, 0x4F, 0x9A, 0xB4, 0xD5, 0xFB,
    0x6A, 0x80, 0xB0, 0xDA, 0xEA, 0x3A, 0x56, 0x6C, 0x89, 0xB3,
    0x6A, 0x7D, 0xA7, 0xCD, 0xDA, 0x12, 0x63, 0x71, 0x90, 0xF3,
    0x35, 0x40, 0x75, 0xD8, 0xED, 0x0E, 0x70, 0xAE, 0xD0, 0xDE,
    0x1E, 0x36, 0x8C, 0xA4, 0xBA, 0x0F, 0x3C, 0x51, 0x62, 0x6D,
    0x6F, 0x7F, 0xA6, 0xB6, 0xD9, 0x07, 0x39, 0x3E, 0xD6, 0xEF,
    0x09, 0x31, 0x38, 0xC8, 0xF9, 0x05, 0x08, 0x0D, 0xCA, 0xCF,
    0x22, 0x46, 0x64, 0xAA, 0xCE, 0x27, 0x30, 0x80, 0x97, 0xB0,
    0x07, 0x57, 0xB8, 0xE8, 0xEF, 0x27, 0x5A, 0xB0, 0xCD, 0xEA,
    0x1B, 0x52, 0x8F, 0xC6, 0xDD, 0x30, 0x7D, 0xB0, 0xCD, 0xFD,
    0x25, 0x3C, 0x47, 0x5E, 0x62, 0x17, 0x4D, 0x5A, 0xEA, 0xFD,
    0x4E, 0x4F, 0x9B, 0xD4, 0xD5, 0x06, 0x14, 0x63, 0x71, 0x77,
    0x03, 0x6B, 0x9C, 0x9F, 0xF7, 0x2F, 0x4F, 0x9A, 0xB5, 0xFA,
    0x04, 0x18, 0x1C, 0xE4, 0xFC, 0x16, 0x48, 0x5E, 0x62, 0x74,
    0x12, 0x63, 0x84, 0x96, 0xF5, 0x69, 0x81, 0x86, 0xE8, 0xEF,
    0x04, 0xB9, 0xBD, 0xE0, 0xE4, 0x27, 0x5A, 0x7D, 0x80, 0xA7,
    0x13, 0x40, 0x98, 0xCB, 0xD8, 0x17, 0x30, 0xCD, 0xDA, 0xEA,
    0x03, 0x5C, 0xAB, 0xF4, 0xF7, 0x17, 0x5A, 0x80, 0x97, 0xDA,
    0x1E, 0x87, 0x8C, 0x92, 0x99, 0x30, 0x4D, 0x97, 0xA7, 0xDA,
    0x3A, 0x4C, 0x76, 0xB3, 0xC5, 0x11, 0x8F, 0x9E, 0xCC, 0xDD,
    0x66, 0x98, 0xBE, 0xD8, 0xFE, 0x3F, 0x64, 0x95, 0xCE, 0xF1,
    0x1E, 0x23, 0x92, 0xAF, 0xB1, 0x1A, 0x3A, 0x89, 0x93, 0xA9,
    0x55, 0x8E, 0xA3, 0xDB, 0xF6, 0x1F, 0x2D, 0x32, 0xA3, 0xBC,
    0x27, 0x4D, 0x6A, 0xA7, 0xEA, 0x0E, 0x70, 0x7E, 0xA2, 0xAC,
    0x17, 0x27, 0x30, 0x4D, 0x7D, 0x10, 0x6F, 0x7F, 0x8D, 0xE2,
    0x17, 0x6A, 0x7D, 0x80, 0xFD, 0x08, 0x2C, 0xC2, 0xCA, 0xE6,
    0x5A, 0x97, 0xA7, 0xCD, 0xFD, 0x38, 0x8A, 0xB2, 0xC1, 0xF9,
    0x02, 0x0C, 0x0E, 0x72, 0x7E, 0x38, 0x42, 0x7A, 0xBB, 0xC1,
    0x21, 0xC2, 0xCA, 0xE3, 0xEB, 0x1D, 0x64, 0x79, 0xAA, 0xD3,
    0x04, 0x41, 0x45, 0xA5, 0xE0, 0x52, 0x58, 0x85, 0xD7, 0xDD,
    0x34, 0xC0, 0xC3, 0xF4, 0xF7, 0x10, 0x2B, 0x44, 0x54, 0x6F,
    0x02, 0x70, 0x72, 0xDC, 0xDE, 0x0F, 0x19, 0x25, 0x33, 0x3C,
    0x09, 0x73, 0x7A, 0xC1, 0xC8, 0x1C, 0x59, 0xBD, 0xE4, 0xF8,
    0x03, 0x5F, 0x9C, 0xC0, 0xC3, 0x1D, 0x46, 0xAA, 0xB7, 0xEC,
    0x66, 0x75, 0x8B, 0x98, 0xED, 0x15, 0x3D, 0x87, 0x92, 0xAF,
    0x01, 0x2E, 0xD5, 0xFA, 0xFB, 0x7C, 0xA2, 0xAE, 0xD2, 0xDE,
    0x33, 0x3C, 0x47, 0x74, 0x7B, 0x2E, 0x4E, 0x60, 0x9B, 0xFB,
    0x09, 0x4B, 0x83, 0x8A, 0xC1, 0x0B, 0x23, 0x28, 0x99, 0xB1,
    0x26, 0x53, 0x98, 0xCB, 0xED, 0x43, 0x85, 0x94, 0xC6, 0xD7,
    0x01, 0x61, 0xB4, 0xD4, 0xD5, 0x1A, 0x76, 0xA9, 0xB3, 0xDF,
    0x08, 0xC7, 0xCF, 0xE6, 0xEE, 0x2F, 0x61, 0x9B, 0xD5, 0xFA,
    0x4C, 0x6C, 0xB3, 0xDF, 0xFF, 0x3F, 0x79, 0x95, 0xAA, 0xEC,
    0x10, 0x2B, 0x3B, 0xE2, 0xF2, 0x19, 0x3C, 0x48, 0x6D, 0x74,
    0x4A, 0x55, 0x91, 0xC4, 0xDB, 0x4A, 0x78, 0x8E, 0xBC, 0xC4,
    0x44, 0x54, 0x8D, 0x9D, 0xC9, 0x0A, 0x52, 0x94, 0xC6, 0xCC,
    0x2A, 0x47, 0x51, 0x6D, 0x7B, 0x08, 0x24, 0x2C, 0xC7, 0xEB,
    0x37, 0x9C, 0x9F, 0xA8, 0xAB, 0x41, 0x5D, 0xB9, 0xE4, 0xF8,
    0x03, 0x5C, 0x5F, 0x68, 0x6B, 0x15, 0x36, 0x92, 0xA4, 0xB1,
    0x07, 0xB8, 0xBF, 0xD1, 0xD6, 0x18, 0x41, 0x59, 0xA5, 0xE4,
    0x13, 0x26, 0x8B, 0x98, 0xBE, 0x10, 0x44, 0xA6, 0xB6, 0xF2,
    0x0A, 0x1B, 0x49, 0x52, 0x58, 0x05, 0x08, 0xE3, 0xEB, 0xEE,
    0x05, 0x0D, 0x24, 0x29, 0x2C, 0x10, 0x3B, 0x8D, 0x9D, 0xB6,
    0x65, 0x84, 0x96, 0xE1, 0xF3, 0x0B, 0x3D, 0x92, 0x99, 0xA4,
    0x53, 0x66, 0xAD, 0xCB, 0xFE, 0x12, 0x14, 0xE1, 0xE7, 0xF3,
    0x22, 0x5B, 0x79, 0x88, 0xD3, 0x07, 0x50, 0x57, 0x86, 0xD1,
    0x07, 0x39, 0x81, 0x86, 0xBF, 0x70, 0xA0, 0xAC, 0xD0, 0xDC,
    0x49, 0x52, 0x85, 0x9E, 0xCC, 0x12, 0x82, 0x90, 0xE7, 0xF5,
    0x06, 0x12, 0x14, 0x82, 0x96, 0x42, 0x73, 0x83, 0xB2, 0xC1,
    0x32, 0x55, 0x8E, 0xBC, 0xE9, 0x67, 0x78, 0x8E, 0xE9, 0xF6,
    0x02, 0x70, 0xA0, 0xA2, 0xD2, 0x20, 0x56, 0x76, 0xC5, 0xE5,
    0x03, 0x68, 0xA8, 0xAB, 0xC3, 0x4B, 0x7A, 0x8A, 0xBB, 0xF0,
    0x56, 0xA9, 0xB3, 0xE5, 0xFF, 0x39, 0x3E, 0x50, 0x57, 0x6E,
    0x22, 0x88, 0x95, 0xAA, 0xB7, 0x18, 0x5D, 0xA1, 0xB9, 0xFC,
    0x39, 0x6E, 0x81, 0xB8, 0xEF, 0x34, 0x68, 0x9F, 0xAB, 0xF7,
    0x13, 0x66, 0x75, 0xAD, 0xD8, 0x0D, 0x21, 0x2C, 0xC7, 0xCA,
    0x32, 0x55, 0x67, 0x91, 0xA3, 0x1F, 0x78, 0xA3, 0xC4, 0xDB,
    0x0E, 0x72, 0x7C, 0xAC, 0xDE, 0x22, 0x64, 0xB7, 0xD3, 0xF1,
    0x01, 0x2F, 0x4E, 0x60, 0x61, 0x18, 0x1C, 0x41, 0x45, 0x5D,
    0x26, 0x75, 0x8B, 0xAD, 0xFE, 0x2E, 0x9B, 0xB5, 0xD4, 0xFA,
    0x0D, 0x29, 0xC7, 0xE3, 0xEE, 0x39, 0x50, 0x69, 0x86, 0xD6,
    0x0A, 0x43, 0x49, 0x9E, 0xD7, 0x02, 0x0C, 0xD0, 0xD2, 0xDE,
    0x01, 0x4E, 0x4F, 0xB5, 0xFB, 0x44, 0x6F, 0xA6, 0xC9, 0xE2,
    0x3E, 0x57, 0x69, 0xD1, 0xEF, 0x2F, 0x4F, 0x60, 0x9B, 0xB4,
    0x1E, 0x23, 0x3D, 0x99, 0xBA, 0x04, 0x18, 0xA1, 0xA5, 0xBD,
    0x31, 0x38, 0x83, 0x8A, 0xBB, 0x3F, 0x46, 0x5B, 0x64, 0x79,
    0x09, 0x31, 0x42, 0x4B, 0x7A, 0x1A, 0x20, 0xC5, 0xDF, 0xFF,
    0x11, 0x58, 0x85, 0x94, 0xCC, 0x37, 0x5F, 0x68, 0x9F, 0xC0,
    0x4C, 0x76, 0x93, 0xA9, 0xE5, 0x3B, 0x54, 0xA6, 0xC9, 0xF2,
    0x0B, 0xA4, 0xAF, 0xB1, 0xBA, 0x3E, 0x6E, 0x81, 0xBF, 0xD1,
    0x26, 0x35, 0xCB, 0xD8, 0xFE, 0x38, 0x7A, 0xB2, 0xC8, 0xF0,
    0x3B, 0x54, 0x6F, 0x8D, 0xD9, 0x06, 0x63, 0x65, 0x90, 0x96,
    0x63, 0x77, 0x84, 0xE7, 0xF3, 0x37, 0x5C, 0x9C, 0xC0, 0xF7,
    0x16, 0x33, 0x47, 0x51, 0x62, 0x1B, 0x43, 0x85, 0x9E, 0xDD,
    0x35, 0x53, 0x66, 0xBE, 0xED, 0x59, 0xA1, 0xA5, 0xF8, 0xFC,
    0x1F, 0x4A, 0x55, 0xBC, 0xF6, 0x32, 0x78, 0x91, 0xDB, 0xE9,
    0x1D, 0x79, 0x88, 0x95, 0xF1, 0x19, 0x2A, 0x33, 0x48, 0x51,
    0x2B, 0x44, 0x9D, 0xB6, 0xD9, 0x73, 0x83, 0xBB, 0xC8, 0xF0,
    0x25, 0x2A, 0x48, 0x62, 0x6D, 0x3A, 0x56, 0x93, 0xC5, 0xFF,
    0x1E, 0x28, 0x36, 0x87, 0xB1, 0x0A, 0x11, 0xC6, 0xD7, 0xDD,
    0x1A, 0x20, 0x3A, 0x6C, 0x76, 0x04, 0x45, 0xB9, 0xF8, 0xFC,
    0x05, 0x29, 0xCA, 0xE3, 0xE6, 0x0C, 0x0E, 0xA0, 0xA2, 0xAE,
    0x15, 0x23, 0x28, 0x36, 0x3D, 0x05, 0x21, 0x24, 0xCF, 0xEB,
    0x06, 0x65, 0x82, 0x84, 0xE7, 0x0F, 0x16, 0x6D, 0x74, 0x7B,
    0x3F, 0x5B, 0xB7, 0xD3, 0xEC, 0x14, 0x77, 0x96, 0xE1, 0xF5,
    0x72, 0x7C, 0xA0, 0xAE, 0xDC, 0x34, 0x6B, 0x9C, 0xA8, 0xC3,
    0x01, 0x2E, 0x2F, 0xB4, 0xB5, 0x1B, 0x43, 0x58, 0x8F, 0x94,
    0x3F, 0x46, 0x88, 0xB7, 0xF1, 0x2E, 0x60, 0x9A, 0xB4, 0xD4,
    0x13, 0x26, 0x35, 0x53, 0x75, 0x37, 0x5C, 0x6B, 0xA8, 0xF4,
    0x0C, 0x72, 0xA0, 0xAC, 0xD2, 0x2B, 0x7F, 0x9D, 0xC9, 0xE2,
    0x4C, 0x89, 0x93, 0xC5, 0xDF, 0x14, 0x65, 0x71, 0x82, 0xF3,
    0x1C, 0x45, 0x59, 0xE0, 0xFC, 0x7F, 0x8D, 0xB6, 0xC9, 0xF2,
    0x35, 0x40, 0x8B, 0xBE, 0xFE, 0x20, 0x56, 0x89, 0xA9, 0xDF,
    0x71, 0x77, 0x82, 0x84, 0xF5, 0x02, 0x7C, 0x7E, 0xA2, 0xDC,
    0x65, 0x71, 0x90, 0xE1, 0xF5, 0x21, 0x24, 0xC7, 0xE3, 0xE6,
    0x1D, 0x46, 0x5B, 0x88, 0xCE, 0x0B, 0x36, 0x3D, 0x87, 0xBA,
    0x42, 0x4B, 0xB2, 0xF0, 0xF9, 0x0A, 0x11, 0x1B, 0x94, 0x9E,
    0x1C, 0x5D, 0xA1, 0xBD, 0xE0, 0x06, 0x77, 0x90, 0xE1, 0xE7,
    0x60, 0x61, 0x9A, 0xFA, 0xFB, 0x15, 0x23, 0x8C, 0xAF, 0xBA,
    0x09, 0x73, 0x8A, 0xF0, 0xF9, 0x4E, 0x61, 0x9A, 0xB5, 0xD4,
    0x2D, 0x91, 0xBC, 0xC4, 0xE9, 0x1F, 0x2D, 0xDB, 0xE9, 0xF6,
    0x29, 0x2C, 0xC2, 0xEB, 0xEE, 0x34, 0x5F, 0x6B, 0x9F, 0xF4,
    0x20, 0x4C, 0x6C, 0x89, 0xE5, 0x34, 0x5C, 0x68, 0xA8, 0xC0,
    0x50, 0x6E, 0xB8, 0xD6, 0xE8, 0x31, 0x4B, 0x83, 0xB2, 0xC8,
    0x24, 0x29, 0xC2, 0xCF, 0xE6, 0x1A, 0x6C, 0x93, 0xE5, 0xFF,
    0x13, 0x40, 0x53, 0xAD, 0xBE, 0x16, 0x25, 0x33, 0x48, 0x7B,
    0x43, 0x49, 0x8F, 0xC6, 0xCC, 0x1D, 0xCE, 0xD3, 0xEC, 0xF1,
    0x41, 0x59, 0xA1, 0xB9, 0xE0, 0x0D, 0x21, 0xC2, 0xCF, 0xEE,
    0x19, 0x2A, 0x47, 0x5E, 0x74, 0x31, 0x42, 0x73, 0xBB, 0xF9,
    0x40, 0x8B, 0xAD, 0xCB, 0xED, 0x3E, 0x69, 0xBF, 0xD6, 0xE8,
    0x50, 0x69, 0x81, 0xB8, 0xD1, 0x0F, 0x25, 0x2A, 0x5E, 0x7B,
    0x1F, 0x32, 0x4A, 0x67, 0x78, 0x2D, 0x4A, 0x67, 0x91, 0xF6,
    0x3B, 0x9D, 0xA6, 0xD9, 0xE2, 0x0B, 0x28, 0x87, 0x8C, 0xAF,
    0x45, 0x5D, 0xA5, 0xBD, 0xF8, 0x7C, 0x7E, 0xAC, 0xD0, 0xD2,
    0x2B, 0x54, 0x7F, 0xD9, 0xF2, 0x22, 0x5B, 0x95, 0xCE, 0xEC,
    0x0F, 0x16, 0x19, 0x51, 0x5E, 0x37, 0x5F, 0xAB, 0xC3, 0xF4,
    0x11, 0x49, 0x58, 0x8F, 0xD7, 0x57, 0x6E, 0x86, 0xBF, 0xE8,
    0x0C, 0x7E, 0xAE, 0xD0, 0xDC, 0x15, 0x28, 0x8C, 0x99, 0xA4};

uint8_t ipm_masks_3mm[768] = {
    0x00, 0x00, 0x00, 0x2D, 0x67, 0xA3, 0x4D, 0x6A, 0xFD, 0x4F, 0x9A, 0xB4,
    0x6A, 0x80, 0xB0, 0x3A, 0x56, 0x89, 0x6A, 0x7D, 0xA7, 0x12, 0x63, 0x90,
    0x35, 0x40, 0xD8, 0x0E, 0x70, 0xDE, 0x1E, 0x36, 0xBA, 0x0F, 0x3C, 0x6D,
    0x6F, 0x7F, 0xD9, 0x07, 0x39, 0xD6, 0x09, 0x31, 0xC8, 0x05, 0x08, 0xCA,
    0x22, 0x64, 0xAA, 0x27, 0x30, 0xB0, 0x07, 0x57, 0xEF, 0x27, 0x5A, 0xEA,
    0x1B, 0x52, 0xDD, 0x30, 0x7D, 0xCD, 0x25, 0x3C, 0x62, 0x17, 0x4D, 0xEA,
    0x4E, 0x4F, 0x9B, 0x06, 0x14, 0x77, 0x03, 0x6B, 0x9C, 0x2F, 0x4F, 0xB5,
    0x04, 0x18, 0xE4, 0x16, 0x48, 0x62, 0x12, 0x63, 0x96, 0x69, 0x81, 0x86,
    0x04, 0xB9, 0xE0, 0x27, 0x5A, 0x80, 0x13, 0x40, 0xD8, 0x17, 0x30, 0xDA,
    0x03, 0x5C, 0xF7, 0x17, 0x5A, 0x80, 0x1E, 0x87, 0x8C, 0x30, 0x4D, 0x97,
    0x3A, 0x76, 0xB3, 0x11, 0x8F, 0xCC, 0x66, 0x98, 0xBE, 0x3F, 0x64, 0xF1,
    0x1E, 0x23, 0xB1, 0x1A, 0x3A, 0x93, 0x55, 0x8E, 0xA3, 0x1F, 0x2D, 0xA3,
    0x27, 0x4D, 0xA7, 0x0E, 0x70, 0xA2, 0x17, 0x30, 0x4D, 0x10, 0x6F, 0x8D,
    0x17, 0x7D, 0x80, 0x08, 0x2C, 0xCA, 0x5A, 0x97, 0xA7, 0x38, 0x8A, 0xC1,
    0x02, 0x0C, 0x72, 0x38, 0x7A, 0xBB, 0x21, 0xC2, 0xCA, 0x1D, 0x79, 0xAA,
    0x04, 0x45, 0xA5, 0x52, 0x58, 0x85, 0x34, 0xC0, 0xC3, 0x10, 0x2B, 0x44,
    0x02, 0x70, 0xDC, 0x0F, 0x19, 0x3C, 0x09, 0x73, 0xC1, 0x1C, 0x59, 0xE4,
    0x03, 0x5F, 0xC3, 0x1D, 0x46, 0xAA, 0x66, 0x75, 0xED, 0x15, 0x3D, 0x92,
    0x01, 0x2E, 0xFB, 0x7C, 0xA2, 0xAE, 0x33, 0x3C, 0x47, 0x2E, 0x60, 0x9B,
    0x09, 0x4B, 0x8A, 0x0B, 0x28, 0x99, 0x26, 0x53, 0xCB, 0x43, 0x85, 0x94,
    0x01, 0x61, 0xD5, 0x1A, 0x76, 0xA9, 0x08, 0xC7, 0xE6, 0x2F, 0x61, 0xFA,
    0x4C, 0x6C, 0xB3, 0x3F, 0x79, 0x95, 0x10, 0x2B, 0xE2, 0x19, 0x3C, 0x74,
    0x4A, 0x55, 0x91, 0x4A, 0x78, 0xC4, 0x44, 0x54, 0xC9, 0x0A, 0x52, 0xC6,
    0x2A, 0x47, 0x51, 0x08, 0x2C, 0xC7, 0x37, 0x9C, 0x9F, 0x41, 0x5D, 0xB9,
    0x03, 0x5C, 0x68, 0x15, 0x36, 0xA4, 0x07, 0xB8, 0xD1, 0x18, 0x41, 0xA5,
    0x13, 0x26, 0x98, 0x10, 0x44, 0xB6, 0x0A, 0x1B, 0x52, 0x05, 0x08, 0xEB,
    0x05, 0x0D, 0x29, 0x10, 0x3B, 0x8D, 0x65, 0x84, 0x96, 0x0B, 0x3D, 0x99,
    0x53, 0x66, 0xAD, 0x12, 0x14, 0xF3, 0x22, 0x5B, 0x88, 0x07, 0x57, 0x86,
    0x07, 0x39, 0x86, 0x70, 0xA0, 0xAC, 0x49, 0x52, 0xCC, 0x12, 0x82, 0xE7,
    0x06, 0x14, 0x82, 0x42, 0x73, 0xC1, 0x32, 0x55, 0xBC, 0x67, 0x78, 0x8E,
    0x02, 0x70, 0xA2, 0x20, 0x56, 0xC5, 0x03, 0x68, 0xAB, 0x4B, 0x7A, 0xF0,
    0x56, 0xA9, 0xB3, 0x39, 0x3E, 0x6E, 0x22, 0x88, 0x95, 0x18, 0x5D, 0xA1,
    0x39, 0x6E, 0x81, 0x34, 0x68, 0x9F, 0x13, 0x75, 0xAD, 0x0D, 0x21, 0xC7,
    0x32, 0x55, 0x91, 0x1F, 0x78, 0xDB, 0x0E, 0x72, 0xAC, 0x22, 0x64, 0xD3,
    0x01, 0x2F, 0x61, 0x18, 0x1C, 0x5D, 0x26, 0x75, 0x8B, 0x2E, 0x9B, 0xD4,
    0x0D, 0x29, 0xEE, 0x39, 0x50, 0x86, 0x0A, 0x49, 0x9E, 0x02, 0x0C, 0xD2,
    0x01, 0x4E, 0xB5, 0x44, 0x6F, 0xA6, 0x3E, 0x57, 0xD1, 0x2F, 0x4F, 0x9B,
    0x1E, 0x23, 0x99, 0x04, 0x18, 0xA5, 0x31, 0x38, 0xBB, 0x3F, 0x46, 0x5B,
    0x09, 0x31, 0x4B, 0x1A, 0x20, 0xDF, 0x11, 0x58, 0x94, 0x37, 0x5F, 0x9F,
    0x4C, 0x76, 0xE5, 0x3B, 0x54, 0xF2, 0x0B, 0xA4, 0xB1, 0x3E, 0x6E, 0xBF,
    0x26, 0x35, 0xFE, 0x38, 0x7A, 0xC8, 0x3B, 0x54, 0x8D, 0x06, 0x63, 0x90,
    0x63, 0x77, 0x84, 0x37, 0x5C, 0xC0, 0x16, 0x33, 0x51, 0x1B, 0x43, 0x9E,
    0x35, 0x53, 0xBE, 0x59, 0xA1, 0xA5, 0x1F, 0x4A, 0xBC, 0x32, 0x78, 0xE9,
    0x1D, 0x79, 0x88, 0x19, 0x2A, 0x48, 0x2B, 0x44, 0x9D, 0x73, 0x83, 0xBB,
    0x25, 0x2A, 0x48, 0x3A, 0x56, 0xC5, 0x1E, 0x36, 0x87, 0x0A, 0x11, 0xD7,
    0x1A, 0x20, 0x6C, 0x04, 0x45, 0xFC, 0x05, 0x29, 0xE3, 0x0C, 0x0E, 0xAE,
    0x15, 0x23, 0x28, 0x05, 0x24, 0xCF, 0x06, 0x65, 0x82, 0x0F, 0x16, 0x7B,
    0x3F, 0x5B, 0xEC, 0x14, 0x77, 0xE1, 0x72, 0x7C, 0xDC, 0x34, 0x6B, 0xA8,
    0x01, 0x2E, 0xB4, 0x1B, 0x43, 0x8F, 0x3F, 0x46, 0xB7, 0x2E, 0x60, 0xB4,
    0x13, 0x26, 0x53, 0x37, 0x5C, 0xA8, 0x0C, 0x72, 0xA0, 0x2B, 0x7F, 0xE2,
    0x4C, 0x89, 0x93, 0x14, 0x71, 0x82, 0x1C, 0x45, 0xE0, 0x7F, 0x8D, 0xB6,
    0x35, 0x40, 0xBE, 0x20, 0x56, 0x89, 0x71, 0x77, 0xF5, 0x02, 0x7E, 0xA2,
    0x65, 0x71, 0x90, 0x21, 0x24, 0xC7, 0x1D, 0x46, 0x88, 0x0B, 0x3D, 0x87,
    0x42, 0x4B, 0xB2, 0x0A, 0x11, 0x94, 0x1C, 0x5D, 0xBD, 0x06, 0x77, 0xE7,
    0x60, 0x61, 0x9A, 0x15, 0x23, 0xAF, 0x09, 0x73, 0xF9, 0x4E, 0x61, 0xD4,
    0x2D, 0x91, 0xC4, 0x1F, 0x2D, 0xF6, 0x29, 0x2C, 0xC2, 0x34, 0x6B, 0x9F,
    0x20, 0x6C, 0x89, 0x34, 0x68, 0xA8, 0x50, 0x6E, 0xB8, 0x31, 0x4B, 0x83,
    0x24, 0x29, 0xE6, 0x1A, 0x6C, 0xFF, 0x13, 0x40, 0xAD, 0x16, 0x33, 0x48,
    0x43, 0x49, 0x8F, 0x1D, 0xCE, 0xEC, 0x41, 0x59, 0xE0, 0x0D, 0x21, 0xCF,
    0x19, 0x2A, 0x5E, 0x31, 0x42, 0xBB, 0x40, 0x8B, 0xAD, 0x3E, 0x69, 0xD6,
    0x50, 0x69, 0xD1, 0x0F, 0x25, 0x5E, 0x1F, 0x32, 0x78, 0x2D, 0x67, 0x91,
    0x3B, 0x9D, 0xD9, 0x0B, 0x28, 0x87, 0x45, 0x5D, 0xF8, 0x7C, 0x7E, 0xAC,
    0x2B, 0x54, 0xD9, 0x22, 0x5B, 0xCE, 0x0F, 0x16, 0x51, 0x37, 0x5F, 0xF4,
    0x11, 0x58, 0x8F, 0x57, 0x6E, 0xE8, 0x0C, 0x7E, 0xD0, 0x15, 0x28, 0x8C};

uint8_t tb5(uint8_t word, uint8_t opm)
{
    const uint16_t offset = 5 * opm;
    uint16_t sum = 0;
    for (uint16_t i = 0; i < 5; i++)
    {
        sum += P8(ipm_masks_5mm[offset + i] & word);
    }
    return sum >= 3;
}

uint8_t tb3(uint8_t word, uint8_t opm)
{
    return (P8(ipm_masks_3mm[3 * opm] & word)
          + P8(ipm_masks_3mm[3 * opm + 1] & word)
          + P8(ipm_masks_3mm[3 * opm + 2] & word)) >= 2;
}

// Classify using the 5 Mask Method
void classify_5mm()
{
    uint64_t sample_size = 0x100000000;
    // uint64_t sample_size = 0x004000000;

    uint32_t pt[4], pt0, pt1, pt2, pt3;
    uint32_t ipp_2D, ipp_67, ipp_8E, ipp_A3, ipp_C4, maj_01;
    uint32_t opp_2D, opp_67, opp_8E, opp_A3, opp_C4, opp_01;

    // Counters
    uint16_t nr_counters = 6;
    uint64_t counters[nr_counters];
    std::fill(counters, counters + nr_counters, sample_size);

    // Classes
    uint16_t idx;
    uint32_t nr_classes = 1 << 12;
    uint64_t classes[nr_classes];
    std::fill(classes, classes + nr_classes, 0);

    for (uint64_t i = 0; i < sample_size; i++)
    {
        // Generate random plaintext
        for (uint16_t j = 0; j < 4; j++)
        {
            pt[j] = rand_uint32();
        }

        // Set diagonal
        pt[0] = (i & 0xFF000000) ^ (pt[0] & 0x00FFFFFF);
        pt[1] = (i & 0x00FF0000) ^ (pt[1] & 0xFF00FFFF);
        pt[2] = (i & 0x0000FF00) ^ (pt[2] & 0xFFFF00FF);
        pt[3] = (i & 0x000000FF) ^ (pt[3] & 0xFFFFFF00);

        // Analyse plaintext
        pt0 = (pt[0] >> 24) & 0xFF;
        pt1 = (pt[1] >> 16) & 0xFF;
        pt2 = (pt[2] >>  8) & 0xFF;
        pt3 = (pt[3] >>  0) & 0xFF;
        ipp_2D = tb5(pt0, 0x16) ^ tb5(pt1, 0x3B) ^ tb5(pt2, 0x2D) ^ tb5(pt3, 0x2D); // ipms for 2D
        ipp_67 = tb5(pt0, 0x33) ^ tb5(pt1, 0x54) ^ tb5(pt2, 0x67) ^ tb5(pt3, 0x67); // ipms for 67
        ipp_8E = tb5(pt0, 0x47) ^ tb5(pt1, 0xC9) ^ tb5(pt2, 0x8E) ^ tb5(pt3, 0x8E); // ipms for 8E
        ipp_A3 = tb5(pt0, 0x51) ^ tb5(pt1, 0xF2) ^ tb5(pt2, 0xA3) ^ tb5(pt3, 0xA3); // ipms for A3
        ipp_C4 = tb5(pt0, 0x62) ^ tb5(pt1, 0xA6) ^ tb5(pt2, 0xC4) ^ tb5(pt3, 0xC4); // ipms for C4

        // Encrypt one round
        SubBytes(pt);
        ShiftRows(pt);
        MixColumns(pt);

        // Analyse cipher text after one round
        opp_2D = P8((pt[0] >> 24) & 0x2D);
        opp_67 = P8((pt[0] >> 24) & 0x67);
        opp_8E = P8((pt[0] >> 24) & 0x8E);
        opp_A3 = P8((pt[0] >> 24) & 0xA3);
        opp_C4 = P8((pt[0] >> 24) & 0xC4);

        // Encrypt additional round
        SubBytes(pt);
        opp_01 = P8((pt[0] >> 24) & 0x01);

        // Compute majority vote
        maj_01 = (ipp_2D + ipp_67 + (1^ipp_8E) + (1^ipp_A3) + (1^ipp_C4)) >= 3;

        // Set counters
        counters[0] -= ipp_2D ^ opp_2D;
        counters[1] -= ipp_67 ^ opp_67;
        counters[2] -= ipp_8E ^ opp_8E;
        counters[3] -= ipp_A3 ^ opp_A3;
        counters[4] -= ipp_C4 ^ opp_C4;
        counters[5] -= maj_01 ^ opp_01;

        // Result classes
        idx = ipp_2D << 11 ^ opp_2D << 10 ^ ipp_67 << 9 ^ opp_67 << 8
            ^ ipp_8E << 7 ^ opp_8E << 6 ^ ipp_A3 << 5 ^ opp_A3 << 4
            ^ ipp_C4 << 3 ^ opp_C4 << 2 ^ maj_01 << 1 ^ opp_01;
        classes[idx] += 1;
    }
    // Print results
    for (uint16_t i = 0; i < nr_counters; i++)
    {
        std::cout << "COUNTER ID: " << i << std::endl;
        printResults(&counters[i], 1, sample_size);
        std::cout << std::endl;
    }

    // Print classes
    for (uint16_t i = 0; i < nr_classes; i++)
    {
        std::cout << "i: " << i << ", cnt: " << classes[i] << std::endl;
    }
}

void classify_3mm()
{
    uint64_t sample_size = 0x100000000;

    uint32_t pt[4], pt0, pt1, pt2, pt3;
    uint32_t ipp_2D, ipp_67, ipp_A3, maj_01;
    uint32_t opp_2D, opp_67, opp_A3, opp_01;

    // Counters
    uint16_t nr_counters = 4;
    uint64_t counters[nr_counters];
    std::fill(counters, counters + nr_counters, sample_size);

    // Classes
    uint16_t idx;
    uint32_t nr_classes = 1 << 8;
    uint64_t classes[nr_classes];
    std::fill(classes, classes + nr_classes, 0);

    for (uint64_t i = 0; i < sample_size; i++)
    {
        // Generate random plaintext
        for (uint16_t j = 0; j < 4; j++)
        {
            pt[j] = rand_uint32();
        }

        // Set diagonal
        pt[0] = (i & 0xFF000000) ^ (pt[0] & 0x00FFFFFF);
        pt[1] = (i & 0x00FF0000) ^ (pt[1] & 0xFF00FFFF);
        pt[2] = (i & 0x0000FF00) ^ (pt[2] & 0xFFFF00FF);
        pt[3] = (i & 0x000000FF) ^ (pt[3] & 0xFFFFFF00);

        // Analyse plaintext
        pt0 = (pt[0] >> 24) & 0xFF;
        pt1 = (pt[1] >> 16) & 0xFF;
        pt2 = (pt[2] >> 8) & 0xFF;
        pt3 = (pt[3] >> 0) & 0xFF;
        ipp_2D = tb3(pt0, 0x16) ^ tb3(pt1, 0x3B) ^ tb3(pt2, 0x2D) ^ tb3(pt3, 0x2D); // ipms for 2D
        ipp_67 = tb3(pt0, 0x33) ^ tb3(pt1, 0x54) ^ tb3(pt2, 0x67) ^ tb3(pt3, 0x67); // ipms for 67
        ipp_A3 = tb3(pt0, 0x51) ^ tb3(pt1, 0xF2) ^ tb3(pt2, 0xA3) ^ tb3(pt3, 0xA3); // ipms for A3

        // Encrypt 1 round
        SubBytes(pt);
        ShiftRows(pt);
        MixColumns(pt);

        // Analyse ciphertext after one round
        opp_2D = P8((pt[0] >> 24) & 0x2D);
        opp_67 = P8((pt[0] >> 24) & 0x67);
        opp_A3 = P8((pt[0] >> 24) & 0xA3);

        // Encrypt subbyte
        SubBytes(pt);
        opp_01 = P8((pt[0] >> 24) & 0x01);

        // Compute majority vote
        maj_01 = (ipp_2D + ipp_67 + (ipp_A3 ^ 1)) >= 2;

        // Set counters
        counters[0] -= ipp_2D ^ opp_2D;
        counters[1] -= ipp_67 ^ opp_67;
        counters[2] -= (ipp_A3 ^ 1) ^ opp_A3;
        counters[3] -= maj_01 ^ opp_01;

        // Result classes
        idx = ipp_2D << 7 ^ opp_2D << 6 ^ ipp_67 << 5 ^ opp_67 << 4
            ^ ipp_A3 << 3 ^ opp_A3 << 2 ^ maj_01 << 1 ^ opp_01;
        classes[idx] += 1;
    }

    // Print results
    for (uint16_t i = 0; i < nr_counters; i++)
    {
        std::cout << "COUNTER ID: " << i << std::endl;
        printResults(&counters[i], 1, sample_size);
        std::cout << std::endl;
    }

    // Print classes
    for (uint16_t i = 0; i < nr_classes; i++)
    {
        std::cout << "i: " << i << ", cnt: " << classes[i] << std::endl;
    }
}

int main()
{
    classify_5mm();
    // classify_3mm();
    return 0;
}