#include "toolbox.h"
#include "aes.h"
#include <numeric>

int I(uint8_t x)
{
    return 1 - (x << 1);
}

uint8_t MASKS0[256] = {0x00, 0x2D, 0x4D, 0x4F, 0x6A, 0x3A, 0x6A, 0x12, 0x35, 0x0E, 0x1E, 0x0F, 0x6F, 0x07, 0x09, 0x05, 0x22, 0x27, 0x07, 0x27, 0x1B, 0x30, 0x25, 0x17, 0x4E, 0x06, 0x03, 0x2F, 0x04, 0x16, 0x12, 0x69, 0x04, 0x27, 0x13, 0x17, 0x03, 0x17, 0x1E, 0x30, 0x3A, 0x11, 0x66, 0x3F, 0x1E, 0x1A, 0x55, 0x1F, 0x27, 0x0E, 0x17, 0x10, 0x17, 0x08, 0x5A, 0x38, 0x02, 0x38, 0x21, 0x1D, 0x04, 0x52, 0x34, 0x10, 0x02, 0x0F, 0x09, 0x1C, 0x03, 0x1D, 0x66, 0x15, 0x01, 0x7C, 0x33, 0x2E, 0x09, 0x0B, 0x26, 0x43, 0x01, 0x1A, 0x08, 0x2F, 0x4C, 0x3F, 0x10, 0x19, 0x4A, 0x4A, 0x44, 0x0A, 0x2A, 0x08, 0x37, 0x41, 0x03, 0x15, 0x07, 0x18, 0x13, 0x10, 0x0A, 0x05, 0x05, 0x10, 0x65, 0x0B, 0x53, 0x12, 0x22, 0x07, 0x07, 0x70, 0x49, 0x12, 0x06, 0x42, 0x32, 0x67, 0x02, 0x20, 0x03, 0x4B, 0x56, 0x39, 0x22, 0x18, 0x39, 0x34, 0x13, 0x0D, 0x32, 0x1F, 0x0E, 0x22, 0x01, 0x18, 0x26, 0x2E, 0x0D, 0x39, 0x0A, 0x02, 0x01, 0x44, 0x3E, 0x2F, 0x1E, 0x04, 0x31, 0x3F, 0x09, 0x1A, 0x11, 0x37, 0x4C, 0x3B, 0x0B, 0x3E, 0x26, 0x38, 0x3B, 0x06, 0x63, 0x37, 0x16, 0x1B, 0x35, 0x59, 0x1F, 0x32, 0x1D, 0x19, 0x2B, 0x73, 0x25, 0x3A, 0x1E, 0x0A, 0x1A, 0x04, 0x05, 0x0C, 0x15, 0x05, 0x06, 0x0F, 0x3F, 0x14, 0x72, 0x34, 0x01, 0x1B, 0x3F, 0x2E, 0x13, 0x37, 0x0C, 0x2B, 0x4C, 0x14, 0x1C, 0x7F, 0x35, 0x20, 0x71, 0x02, 0x65, 0x21, 0x1D, 0x0B, 0x42, 0x0A, 0x1C, 0x06, 0x60, 0x15, 0x09, 0x4E, 0x2D, 0x1F, 0x29, 0x34, 0x20, 0x34, 0x50, 0x31, 0x24, 0x1A, 0x13, 0x16, 0x43, 0x1D, 0x41, 0x0D, 0x19, 0x31, 0x40, 0x3E, 0x50, 0x0F, 0x1F, 0x2D, 0x3B, 0x0B, 0x45, 0x7C, 0x2B, 0x22, 0x0F, 0x37, 0x11, 0x57, 0x0C, 0x15};
uint8_t MASKS1[256] = {0x00, 0x67, 0x6A, 0x9A, 0x80, 0x56, 0x7D, 0x63, 0x40, 0x70, 0x36, 0x3C, 0x7F, 0x39, 0x31, 0x08, 0x46, 0x30, 0x57, 0x5A, 0x52, 0x7D, 0x3C, 0x4D, 0x4F, 0x14, 0x6B, 0x4F, 0x18, 0x48, 0x63, 0x81, 0xB9, 0x5A, 0x40, 0x30, 0x5C, 0x5A, 0x87, 0x4D, 0x4C, 0x8F, 0x98, 0x64, 0x23, 0x3A, 0x8E, 0x2D, 0x4D, 0x70, 0x27, 0x6F, 0x6A, 0x2C, 0x97, 0x8A, 0x0C, 0x42, 0xC2, 0x64, 0x41, 0x58, 0xC0, 0x2B, 0x70, 0x19, 0x73, 0x59, 0x5F, 0x46, 0x75, 0x3D, 0x2E, 0xA2, 0x3C, 0x4E, 0x4B, 0x23, 0x53, 0x85, 0x61, 0x76, 0xC7, 0x61, 0x6C, 0x79, 0x2B, 0x3C, 0x55, 0x78, 0x54, 0x52, 0x47, 0x24, 0x9C, 0x5D, 0x5C, 0x36, 0xB8, 0x41, 0x26, 0x44, 0x1B, 0x08, 0x0D, 0x3B, 0x84, 0x3D, 0x66, 0x14, 0x5B, 0x50, 0x39, 0xA0, 0x52, 0x82, 0x12, 0x73, 0x55, 0x78, 0x70, 0x56, 0x68, 0x7A, 0xA9, 0x3E, 0x88, 0x5D, 0x6E, 0x68, 0x66, 0x21, 0x55, 0x78, 0x72, 0x64, 0x2F, 0x1C, 0x75, 0x9B, 0x29, 0x50, 0x43, 0x0C, 0x4E, 0x6F, 0x57, 0x4F, 0x23, 0x18, 0x38, 0x46, 0x31, 0x20, 0x58, 0x5F, 0x76, 0x54, 0xA4, 0x6E, 0x35, 0x7A, 0x54, 0x63, 0x77, 0x5C, 0x33, 0x43, 0x53, 0xA1, 0x4A, 0x78, 0x79, 0x2A, 0x44, 0x83, 0x2A, 0x56, 0x28, 0x11, 0x20, 0x45, 0x29, 0x0E, 0x23, 0x21, 0x65, 0x16, 0x5B, 0x77, 0x7C, 0x6B, 0x2E, 0x43, 0x46, 0x60, 0x26, 0x5C, 0x72, 0x7F, 0x89, 0x65, 0x45, 0x8D, 0x40, 0x56, 0x77, 0x7C, 0x71, 0x24, 0x46, 0x36, 0x4B, 0x11, 0x5D, 0x77, 0x61, 0x23, 0x73, 0x61, 0x91, 0x2D, 0x2C, 0x5F, 0x4C, 0x5C, 0x6E, 0x4B, 0x29, 0x6C, 0x40, 0x25, 0x49, 0xCE, 0x59, 0x21, 0x2A, 0x42, 0x8B, 0x69, 0x69, 0x25, 0x32, 0x4A, 0x9D, 0x28, 0x5D, 0x7E, 0x54, 0x5B, 0x16, 0x5F, 0x49, 0x6E, 0x7E, 0x28};
uint8_t MASKS2[256] = {0x00, 0x8E, 0x97, 0xB4, 0xB0, 0x6C, 0xA7, 0x71, 0x75, 0xAE, 0x8C, 0x51, 0xA6, 0x3E, 0x38, 0x0D, 0x64, 0x80, 0xB8, 0xB0, 0x8F, 0xB0, 0x47, 0x5A, 0x9B, 0x63, 0x9C, 0x9A, 0x1C, 0x5E, 0x84, 0x86, 0xBD, 0x7D, 0x98, 0xCD, 0xAB, 0x80, 0x8C, 0x97, 0x76, 0x9E, 0xBE, 0x95, 0x92, 0x89, 0xA3, 0x32, 0x6A, 0x7E, 0x30, 0x7F, 0x7D, 0xC2, 0xA7, 0xB2, 0x0E, 0x7A, 0xCA, 0x79, 0x45, 0x85, 0xC3, 0x44, 0x72, 0x25, 0x7A, 0xBD, 0x9C, 0xAA, 0x8B, 0x87, 0xD5, 0xAE, 0x47, 0x60, 0x83, 0x28, 0x98, 0x94, 0xB4, 0xA9, 0xCF, 0x9B, 0xB3, 0x95, 0x3B, 0x48, 0x91, 0x8E, 0x8D, 0x94, 0x51, 0x2C, 0x9F, 0xB9, 0x5F, 0x92, 0xBF, 0x59, 0x8B, 0xA6, 0x49, 0xE3, 0x24, 0x8D, 0x96, 0x92, 0xAD, 0xE1, 0x79, 0x57, 0x81, 0xAC, 0x85, 0x90, 0x14, 0x83, 0x8E, 0x8E, 0xA0, 0x76, 0xA8, 0x8A, 0xB3, 0x50, 0x95, 0xA1, 0x81, 0x9F, 0x75, 0x2C, 0x67, 0xA3, 0x7C, 0xB7, 0x4E, 0x41, 0x8B, 0xB5, 0xC7, 0x69, 0x49, 0xD0, 0x4F, 0xA6, 0x69, 0x60, 0x3D, 0xA1, 0x83, 0x5B, 0x42, 0xC5, 0x85, 0x68, 0x93, 0xA6, 0xAF, 0x81, 0xCB, 0xB2, 0x6F, 0x65, 0x84, 0x9C, 0x47, 0x85, 0x66, 0xA5, 0x55, 0x91, 0x88, 0x33, 0x9D, 0xBB, 0x48, 0x93, 0x36, 0xC6, 0x3A, 0xB9, 0xCA, 0xA0, 0x28, 0x24, 0x82, 0x6D, 0xB7, 0x96, 0xA0, 0x9C, 0x2F, 0x58, 0x88, 0x9A, 0x35, 0x6B, 0xA0, 0x9D, 0x93, 0x71, 0x59, 0xB6, 0x8B, 0x89, 0x82, 0x7E, 0x90, 0xC7, 0x5B, 0x3D, 0xB2, 0x1B, 0xA1, 0x90, 0x9A, 0x8C, 0x8A, 0x9A, 0xBC, 0xDB, 0xC2, 0x6B, 0x6C, 0x68, 0xB8, 0x83, 0xC2, 0x93, 0x53, 0x33, 0x8F, 0xD3, 0xA1, 0xC2, 0x47, 0x73, 0xAD, 0xBF, 0x81, 0x2A, 0x4A, 0x67, 0xA6, 0x87, 0xA5, 0xAC, 0x7F, 0x95, 0x19, 0xAB, 0x58, 0x86, 0xAE, 0x8C};
uint8_t MASKS3[256] = {0x00, 0xA3, 0xB0, 0xD5, 0xDA, 0x89, 0xCD, 0x90, 0xD8, 0xD0, 0xA4, 0x62, 0xB6, 0xD6, 0xC8, 0xCA, 0xAA, 0x97, 0xE8, 0xCD, 0xC6, 0xCD, 0x5E, 0xEA, 0xD4, 0x71, 0x9F, 0xB5, 0xE4, 0x62, 0x96, 0xE8, 0xE0, 0x80, 0xCB, 0xDA, 0xF4, 0x97, 0x92, 0xA7, 0xB3, 0xCC, 0xD8, 0xCE, 0xAF, 0x93, 0xDB, 0xA3, 0xA7, 0xA2, 0x4D, 0x8D, 0x80, 0xCA, 0xCD, 0xC1, 0x72, 0xBB, 0xE3, 0xAA, 0xA5, 0xD7, 0xF4, 0x54, 0xDC, 0x33, 0xC1, 0xE4, 0xC0, 0xB7, 0x98, 0x92, 0xFA, 0xD2, 0x74, 0x9B, 0x8A, 0x99, 0xCB, 0xC6, 0xD4, 0xB3, 0xE6, 0xD5, 0xDF, 0xAA, 0xE2, 0x6D, 0xC4, 0xBC, 0x9D, 0xC6, 0x6D, 0xC7, 0xA8, 0xE4, 0x68, 0xA4, 0xD1, 0xA5, 0x98, 0xB6, 0x52, 0xEB, 0x29, 0x9D, 0xE1, 0x99, 0xCB, 0xE7, 0x88, 0x86, 0x86, 0xD0, 0x9E, 0xE7, 0x82, 0xB2, 0xBC, 0xE9, 0xA2, 0xC5, 0xAB, 0xBB, 0xE5, 0x57, 0xAA, 0xB9, 0xB8, 0xAB, 0xAD, 0xC7, 0x91, 0xC4, 0xAC, 0xD3, 0x60, 0x45, 0xAD, 0xD4, 0xE3, 0x86, 0x9E, 0xD2, 0xB5, 0xC9, 0xD1, 0x9B, 0x99, 0xA5, 0x8A, 0x64, 0x4B, 0xDF, 0x94, 0x9F, 0xA9, 0xC9, 0xB1, 0xBF, 0xD8, 0xC8, 0x8D, 0x90, 0xE7, 0xC0, 0x51, 0x9E, 0xBE, 0xF8, 0xBC, 0xDB, 0x95, 0x48, 0xB6, 0xC8, 0x62, 0xC5, 0x87, 0xD7, 0x6C, 0xF8, 0xE3, 0xA2, 0x36, 0xCF, 0x84, 0x74, 0xD3, 0xE1, 0xAE, 0xA8, 0xB4, 0x8F, 0xB7, 0xB4, 0x53, 0xA8, 0xAC, 0xC9, 0xC5, 0x82, 0xE0, 0xC9, 0xBE, 0xA9, 0x84, 0xA2, 0xE1, 0xE3, 0x88, 0x87, 0xF0, 0x94, 0xBD, 0xE1, 0xFA, 0xAF, 0xF0, 0xB5, 0xC4, 0xE9, 0xEB, 0x9F, 0x89, 0xA8, 0xD6, 0xB2, 0xCF, 0xE5, 0xAD, 0x48, 0xC6, 0xEC, 0xB9, 0xCF, 0x5E, 0xBB, 0xCB, 0xD6, 0xB8, 0x5E, 0x67, 0x91, 0xD9, 0x8C, 0xBD, 0xD0, 0xD9, 0xCE, 0x51, 0xC3, 0x8F, 0xBF, 0xD0, 0x99};
uint8_t MASKS4[256] = {0x00, 0xC4, 0xFD, 0xFB, 0xEA, 0xB3, 0xDA, 0xF3, 0xED, 0xDE, 0xBA, 0x6D, 0xD9, 0xEF, 0xF9, 0xCF, 0xCE, 0xB0, 0xEF, 0xEA, 0xDD, 0xFD, 0x62, 0xFD, 0xD5, 0x77, 0xF7, 0xFA, 0xFC, 0x74, 0xF5, 0xEF, 0xE4, 0xA7, 0xD8, 0xEA, 0xF7, 0xDA, 0x99, 0xDA, 0xC5, 0xDD, 0xFE, 0xF1, 0xB1, 0xA9, 0xF6, 0xBC, 0xEA, 0xAC, 0x7D, 0xE2, 0xFD, 0xE6, 0xFD, 0xF9, 0x7E, 0xC1, 0xEB, 0xD3, 0xE0, 0xDD, 0xF7, 0x6F, 0xDE, 0x3C, 0xC8, 0xF8, 0xC3, 0xEC, 0xED, 0xAF, 0xFB, 0xDE, 0x7B, 0xFB, 0xC1, 0xB1, 0xED, 0xD7, 0xD5, 0xDF, 0xEE, 0xFA, 0xFF, 0xEC, 0xF2, 0x74, 0xDB, 0xC4, 0xC9, 0xCC, 0x7B, 0xEB, 0xAB, 0xF8, 0x6B, 0xB1, 0xD6, 0xE4, 0xBE, 0xF2, 0x58, 0xEE, 0x2C, 0xB6, 0xF3, 0xA4, 0xFE, 0xF3, 0xD3, 0xD1, 0xBF, 0xDC, 0xCC, 0xF5, 0x96, 0xC1, 0xE9, 0xF6, 0xD2, 0xE5, 0xC3, 0xF0, 0xFF, 0x6E, 0xB7, 0xFC, 0xEF, 0xF7, 0xD8, 0xCA, 0xA3, 0xDB, 0xDE, 0xF1, 0x61, 0x5D, 0xFE, 0xFA, 0xEE, 0xD6, 0xD7, 0xDE, 0xFB, 0xE2, 0xEF, 0xB4, 0xBA, 0xBD, 0xBB, 0x79, 0x7A, 0xFF, 0xCC, 0xC0, 0xE5, 0xF2, 0xBA, 0xD1, 0xFE, 0xF0, 0xD9, 0x96, 0xF3, 0xF7, 0x62, 0xDD, 0xED, 0xFC, 0xF6, 0xE9, 0xF1, 0x51, 0xD9, 0xF0, 0x6D, 0xFF, 0xB1, 0xDD, 0x76, 0xFC, 0xE6, 0xAE, 0x3D, 0xEB, 0xE7, 0x7B, 0xEC, 0xF5, 0xDC, 0xC3, 0xB5, 0x94, 0xF1, 0xD4, 0x75, 0xF4, 0xD2, 0xE2, 0xDF, 0xF3, 0xFC, 0xF2, 0xFE, 0xDF, 0xF5, 0xDC, 0xF5, 0xE6, 0xCE, 0xBA, 0xF9, 0x9E, 0xE0, 0xE7, 0xFB, 0xBA, 0xF9, 0xD4, 0xE9, 0xF6, 0xEE, 0xF4, 0xE5, 0xC0, 0xE8, 0xC8, 0xE6, 0xFF, 0xBE, 0x7B, 0xCC, 0xF1, 0xE0, 0xEE, 0x74, 0xF9, 0xED, 0xE8, 0xD1, 0x7B, 0x78, 0xF6, 0xE2, 0xAF, 0xF8, 0xD2, 0xF2, 0xEC, 0x5E, 0xF4, 0xD7, 0xE8, 0xDC, 0xA4};

void findkeyguess()
{
    int16_t corr128;
    uint8_t ipp, opp;
    uint8_t M0, M1, M2, M3, M4;
    std::cout << "{\n";
    for (uint16_t opm = 1; opm < 256; opm++)
    {
        std::cout << "\"" << opm << "\": {\n";

        M0 = MASKS0[opm];
        M1 = MASKS1[opm];
        M2 = MASKS2[opm];
        M3 = MASKS3[opm];
        M4 = MASKS4[opm];

        for (uint16_t key = 0; key < 256; key++)
        {
            std::cout << "\"" << key << "\" : \"";

            for (uint16_t guess = 0; guess < 256; guess++)
            {
                corr128 = 128;
                for (uint16_t pt = 0; pt < 256; pt++)
                {
                    ipp = I(P8((pt ^ guess) & M0)) + I(P8((pt ^ guess) & M1)) + I(P8((pt ^ guess) & M2)) + I(P8((pt ^ guess) & M3)) + I(P8((pt ^ guess) & M4)) >= 0;
                    opp = P8(opm & SubByteByte(pt ^ key));
                    corr128 -= ipp ^ opp;
                }
                std::cout << (std::abs(corr128) == 32);
                // std::cout << "opm:" << opm << ", key:" << key << ", guess:" << guess << ", corr:" << corr128 << std::endl;
            }
            std::cout << "\",\n";
        }
        std::cout << "},\n";
    }
    std::cout << "}";
}

int main()
{
    findkeyguess();
    return 0;
}