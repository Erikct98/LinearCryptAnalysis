#include "toolbox.h"
#include <iostream>
#include <random>

// Lookup table for sbox
static const uint8_t sbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

uint32_t P32(uint32_t v)
{
    v ^= v >> 16;
    v ^= v >> 8;
    v ^= v >> 4;
    v &= 0xF;
    return (0x6996 >> v) & 0x1;
}

uint8_t P8(uint8_t v)
{
    v ^= v >> 4;
    v &= 0xF;
    return (0x6996 >> v) & 0x1;
}

uint8_t SubByteByte(uint8_t word)
{
    return sbox[word & 0xFF];
}

uint32_t SubByteCol(uint32_t col)
{
    uint8_t *tmp = (uint8_t *)&col;
    for (uint8_t i = 0; i < 4; i++)
    {
        tmp[i] = SubByteByte(tmp[i]);
    }
    return col;
}

void SubBytes(uint32_t *grid)
{
    uint8_t *tmp = (uint8_t *)grid;
    for (uint8_t i = 0; i < 16; i++)
    {
        tmp[i] = SubByteByte(tmp[i]);
    }
}

void ShiftRows(uint32_t *grid)
{
    uint32_t tmp[4];
    tmp[0] = grid[0] & 0xFF000000 ^ grid[1] & 0xFF0000 ^ grid[2] & 0xFF00 ^ grid[3] & 0xFF;
    tmp[1] = grid[1] & 0xFF000000 ^ grid[2] & 0xFF0000 ^ grid[3] & 0xFF00 ^ grid[0] & 0xFF;
    tmp[2] = grid[2] & 0xFF000000 ^ grid[3] & 0xFF0000 ^ grid[0] & 0xFF00 ^ grid[1] & 0xFF;
    tmp[3] = grid[3] & 0xFF000000 ^ grid[0] & 0xFF0000 ^ grid[1] & 0xFF00 ^ grid[2] & 0xFF;
    for (uint8_t i = 0; i < 4; i++)
    {
        grid[i] = tmp[i];
    }
}

uint32_t mulp2(uint32_t a)
{
    uint32_t x = sw8cylesh32_1(a);
    return x ^ ((x & 0x01010101) * 0x1A);
}

uint32_t MixColumn(uint32_t state)
{
    uint32_t tmp;
    tmp = mulp2(state);
    tmp ^= cylesh32_8(tmp) ^ cylesh32_8(state);
    tmp ^= cylesh32_16(state);
    tmp ^= cylesh32_24(state);
    return tmp;
}

void MixColumns(uint32_t *state)
{
    uint32_t tmp[4];
    for (uint8_t i = 0; i < 4; i++)
    {
        tmp[i] = mulp2(state[i]);
        tmp[i] ^= cylesh32_8(tmp[i]) ^ cylesh32_8(state[i]);
        tmp[i] ^= cylesh32_16(state[i]);
        tmp[i] ^= cylesh32_24(state[i]);
    }
    for (uint8_t i = 0; i < 4; i++)
    {
        state[i] = tmp[i];
    }
}

void AddRoundKey(uint32_t *State, uint32_t *ExpandedKey, uint8_t round)
{
    for (uint8_t i = 0; i < 4; i++)
    {
        State[i] ^= ExpandedKey[4 * round + i];
    }
}

uint32_t Rcon(int n)
{
    uint8_t c = 1;
    for (uint8_t i = 0; i < n - 1; i++)
    {
        c = (c << 1) ^ (((c >> 7) & 1) * 0x1b);
    }
    return c << 24;
}

void ExpandKey(uint32_t *key, uint32_t *expandedkey, uint8_t nr_rounds)
{
    for (uint8_t j = 0; j < 4; j++)
    {
        expandedkey[j] = key[j];
    }
    for (uint32_t r = 4; r < 4 * nr_rounds; r++)
    {
        expandedkey[r] = expandedkey[r - 4];
        if (r % 4 == 0)
        {
            expandedkey[r] ^= SubByteCol(cylesh32_8(expandedkey[r - 1])) ^ Rcon(r / 4);
        }
        else
        {
            expandedkey[r] ^= expandedkey[r - 1];
        }
    }
}

// Randomization
std::mt19937 mt(time(0));
std::uniform_int_distribution<uint32_t> randuint32(0, 0xFFFFFFFF);
std::uniform_int_distribution<uint64_t> randuint64(0, 0xFFFFFFFFFFFFFFFF);

uint32_t rand_uint32()
{
    return randuint32(mt);
}

void printResults(uint64_t *counts, uint16_t count_len, uint64_t total)
{
    std::cout << "counts: ";
    for (uint16_t i = 0; i < count_len; i++)
    {
        std::cout << counts[i] << " ";
    }
    std::cout << std::endl;

    uint64_t total_count = std::accumulate(counts, counts + count_len, 0);
    float corr = 2 * (total_count / (float)total) - 1;
    float corrlog = std::log2(std::abs(corr));
    std::cout << "corr = 2 * (" << total_count << "/" << total
              << ") - 1 = " << corr
              << " = (+/-) 2^" << corrlog << std::endl;

    float max_detectable = 1 - std::log2(total) / 2;
    std::cout << "max detectable corr: " << max_detectable << std::endl;

    if (corrlog < max_detectable) {
        std::cout << "NOT DETECTABLE!" << std::endl;

    }
}
